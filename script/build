#!/usr/bin/env node

'use strict'

const path = require('path')
const cp = require('child_process')
const fs = require('fs-extra')
const packager = require('electron-packager')

const projectRoot = path.join(__dirname, '..')
const outRoot = path.join(projectRoot, 'out')
const appPackagePath = path.join(projectRoot, 'app', 'package.json')
const appPackage = require(appPackagePath)

console.log(`Building for ${process.env.NODE_ENV}…`)

console.log('Removing old distribution…')
fs.removeSync(path.join(projectRoot, 'dist'))

console.log('Copying dependencies…')
copyDependencies()

console.log('Packaging embedded Git…')
copyGitDirectory()

if (process.platform === 'darwin' && process.env.TRAVIS_BRANCH) {
  console.log('Setting up keychain…')
  cp.execSync(path.join(__dirname, 'setup-macos-keychain'))
}

const options = {
  platform: process.platform,
  arch: 'x64',
  'app-version': appPackage.version,
  'build-version': appPackage.version,
  asar: false, // TODO: Probably wanna enable this down the road.
  out: path.join(projectRoot, 'dist'),
  icon: path.join(projectRoot, 'app', 'static', 'icon'),
  dir: outRoot,
  overwrite: true,
  tmpdir: false,
  derefSymlinks: false,
  prune: false, // We'll prune them ourselves below.
  ignore: [
    '/node_modules/electron-prebuilt($|/)',
    '/node_modules/electron-packager($|/)',
    '/\\.git($|/)',
    '/node_modules/\\.bin($|/)'
  ],

  // macOS
  'app-bundle-id': appPackage.bundleID,
  'app-category-type': 'public.app-category.developer-tools',
  'protocols': [
    {
      name: 'GitHub Auth',
      schemes: [
        'x-github-client'
      ]
    }
  ],
  'osx-sign': true,

  // Windows
  'version-string': {
    'CompanyName': appPackage.companyName,
    'FileDescription': '',
    'OriginalFilename': '',
    'ProductName': appPackage.productName,
    'InternalName': appPackage.productName
  }
}

console.log('Packaging…')
packager(options, (error, appPaths) => {
  if (error) {
    console.error(error)
    process.exit(1)
  } else {
    console.log(`Built to ${appPaths}`)
    process.exit(0)
  }
})

function copyGitDirectory () {
  let source = projectRoot

  if (process.platform === 'darwin') {
    source = path.join(projectRoot, 'git', 'git-macos', 'git')
  } else if (process.platform === 'win32') {
    source = path.join(projectRoot, 'git', 'git-win32', 'git')
  } else {
    console.error(`No Git provided for platform ${process.platform} :(`)
    process.exit(1)
  }

  const destination = path.join(outRoot, 'git')
  fs.removeSync(destination)
  fs.copySync(source, destination)
}

function copyDependencies () {
  let destination = path.join(outRoot, 'package.json')
  fs.removeSync(destination)
  fs.copySync(path.join(projectRoot, 'app', 'package.json'), destination)

  destination = path.join(outRoot, 'node_modules')
  fs.removeSync(destination)
  fs.copySync(path.join(projectRoot, 'app', 'node_modules'), destination)

  const isProductionBuild = process.env.NODE_ENV === 'production'
  if (isProductionBuild) {
    console.log('Pruning dev dependencies…')
    cp.execSync('npm prune --production', {cwd: outRoot, env: process.env})
  }
}
