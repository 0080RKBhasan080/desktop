#!/usr/bin/env node

'use strict'

const path = require('path')
const cp = require('child_process')
const fs = require('fs-extra')
const packager = require('electron-packager')

const projectRoot = path.join(__dirname, '..')
const buildRoot = path.join(projectRoot, 'build')
const appPackage = require(path.join(projectRoot, 'package.json'))

console.log('Removing old distribution…')
fs.removeSync(path.join(projectRoot, 'dist'))

console.log('Installing dependencies…')
fs.copySync(path.join(projectRoot, 'package.json'), path.join(buildRoot, 'package.json'), {clobber: true})
cp.execSync('npm install --only=production', {cwd: buildRoot})

console.log('Copying `static`…')
fs.copySync(path.join(projectRoot, 'static'), path.join(buildRoot, 'static'), {clobber: true})

const options = {
  platform: process.platform,
  arch: 'x64',
  'app-version': appPackage.version,
  'build-version': appPackage.version,
  asar: false, // TODO: Probably wanna enable this down the road.
  out: path.join(projectRoot, 'dist'),
  icon: path.join(buildRoot, 'static', 'icon'),
  dir: path.join(projectRoot, 'build'),
  overwrite: true,
  prune: false, // We do it above, before copying `node_modules`.

  // OS X
  'app-bundle-id': appPackage.bundleID,
  'app-category-type': 'public.app-category.developer-tools',

  // Windows
  'version-string': {
    'CompanyName': appPackage.companyName,
    'FileDescription': '',
    'OriginalFilename': '',
    'ProductName': appPackage.productName,
    'InternalName': appPackage.productName
  }
}

console.log('Packaging…')
packager(options, (error, appPaths) => {
  if (error) {
    console.error(error)
    process.exit(1)
  } else {
    console.log(`Built to ${appPaths}`)
    process.exit(0)
  }
})
