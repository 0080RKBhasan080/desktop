@import "../../mixins";

#desktop-app-title-bar {
  -webkit-app-region: drag;
  flex-grow: 0;
  flex-shrink: 0;
  width: 100%;

  display: flex;
  flex-direction: row;

  .app-title {
    flex-grow: 1;
    flex-shrink: 1;
    text-align: center;
    @include ellipsis;

    // This is cheating a bit but we'll use this to "push" the
    // window controls to the right on Windows. We could also
    // display: none and do flex-direction row-reverse.
    visibility: hidden;
  }

  @include darwin {
    height: var(--darwin-title-bar-height);
    z-index: 1;

    background: linear-gradient(to bottom, #3b3f46 0%,#2b2e33 100%);
    border-bottom: 1px solid #000;
  }

  // If you put a -webkit-app-region: drag element close to a window
  // frame edge it prevents resizing so we move the title bar down
  // 5px on windows to create a resize area equal to that of the sides
  // and bottom of the app. We don't want to push the window controls
  // down though so we'll compensate by giving them an equal but negative
  // margin.
  @include win32 {
    margin-top: 5px;
    height: calc(var(--win32-title-bar-height) - 5px);
    .window-controls { margin-top: -5px }
  }

  // Don't ever show the title bar when we're in full screen mode.
  @include in-fullscreen { display: none; }

  // Window controls is the container for the three buttons minimize,
  // maximize/restore and close. On macOS the controls are added
  // automatically even for borderless window so we only render
  // controls on Windows.
  .window-controls {

    flex-grow: 0;
    flex-shrink: 0;

    // Each button contains a single SVG element with a Windows 10-replica
    // icon for the function it represents
    button {
      -webkit-app-region: no-drag;

      display: inline-block;
      position: relative;
      width: 45px;
      height: 29px;
      padding: 0;
      margin: 0;
      overflow: hidden;

      // Reset styles from global buttons
      border: none;
      box-shadow: none;
      border-radius: 0;

      color: #fff;
      background-color: transparent;
      transition: background-color 0.25s ease;

      &:hover {
        background-color: #888;

        // Doing :hover:active as oposed to just :active is
        // a conscious choice to match how the real Windows
        // controls behave when someone hovers, clicks and then
        // moves away from the hitbox.
        &:active {
          background-color: #666;

          // Immediate feedback when clicking
          transition: none;
        }
      }

      // Close button is a special case, it needs to be red
      // on hover and slightly lighter red on active.
      &.close:hover {
        background-color: #e81123;

        &:active {
          background-color: #bf0f1d;

          // Immediate feedback when clicking
          transition: none;
        }
      }

      svg {
        position: absolute;

        /* https://css-tricks.com/cascading-svg-fill-color/ */
        fill: currentColor;

        // These may seem arbitrary but in an uneven 45x29 box
        // this positions the 10x10 icons centered but rounded
        // down as opposed to rounded up which they'd be if we
        // made the button a flexbox and told it to center the
        // svg horizontally and vertically.
        top: 9px;
        left: 17px;
      }
    }
  }
}

#desktop-app-title-bar.light-title-bar {
  @include darwin {
    height: var(--darwin-title-bar-height);
    z-index: 1;

    background: transparent;
    border-bottom: none;
  }
}
